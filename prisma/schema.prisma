generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Picture {
  idPicture     Int           @id @default(autoincrement())
  idStakeholder String
  designation   String
  date          DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  pictureFile   String
  stakeHolder   StakeHolder[]
}

model Address {
  idAddress   Int           @id @default(autoincrement())
  country     String
  state       String
  city        String
  postbox     String
  street      String
  number      String
  isActive    State         @default(ACTIVE)
  StakeHolder StakeHolder[]
  field       Field[]
  Linkage     Linkage[]
}

model StakeHolder {
  idStakeHolder   String        @id @default(uuid())
  name            String        @db.VarChar(100)
  industry        String        @db.VarChar(100)
  email           String        @db.VarChar(100)
  password        String        @db.VarChar(50)
  fax             String
  www             String
  state           State         @default(ACTIVE)
  idAddress       Int
  address         Address       @relation(fields: [idAddress], references: [idAddress])
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
  idPicture       Int
  picture         Picture       @relation(fields: [idPicture], references: [idPicture])
  project         Project[]
}

model Project {
  idProject       String        @id @default(uuid())
  state           State         @default(ACTIVE)
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
  idStakeholder   String
  stakeholder     StakeHolder   @relation(fields: [idStakeholder], references: [idStakeHolder])
  designation     String
  linkage         Linkage[]
}

model Role {
  idRole        Int             @id @default(autoincrement())
  roleName      String          @db.VarChar(50)
  state         State           @default(ACTIVE)
  contactPerson ContactPerson[]
}

model PhoneContactPerson {
  phoneId                      Int           @id @default(autoincrement())
  number                       String
  contactPersonIdContactPerson String
  contactPerson                ContactPerson @relation(fields: [contactPersonIdContactPerson], references: [idContactPerson])
}

model ContactPerson {
  idContactPerson     String                @id @default(uuid())
  firstName           String                @db.VarChar(50)
  lastName            String                @db.VarChar(50)
  fax                 String
  www                 String
  email               String                @db.VarChar(100)
  password            String                @db.VarChar(50)
  state               State                 @default(ACTIVE)
  phones              PhoneContactPerson[]
  idRole              Int
  role                Role                  @relation(fields: [idRole], references: [idRole])
  auditLog            AuditLog[]
  positionSoilData    PositionSoilData[]
  positionMeasurement PositionMeasurement[]
  stakeHolder         StakeHolder[]
  positionResistivity PositionResistivity[]
  project             Project[]
}

model Field {
  fieldId                  String    @id @default(uuid())
  fence                    Boolean
  connectionEarthingFence  Boolean
  externalCurrentInfluence Boolean
  state                    State     @default(ACTIVE)
  idAddress                Int
  address                  Address   @relation(fields: [idAddress], references: [idAddress])
  linkage                  Linkage[]
}

model PositionData {
  idPositionData   String    @id @default(uuid())
  pointType        String
  latitude         Float
  longitude        Float
  pileDesignation  String
  pointDesignation String
  grounding        String
  linkage          Linkage[]
}

model PositionMeasurement {
  idPositionMeasurement String        @id @default(uuid())
  designation           String
  date                  DateTime      @default(now())
  updateAt              DateTime      @updatedAt
  potentialVr           Float
  potentialVOn          Float
  potentialVOff         Float
  galvanicCurrent       Float
  coatingThickness      Float
  materialTrickness     Float
  linkage               Linkage[]
  idContactPerson       String
  contactPerson         ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
}

model PositionResistivity {
  idPositionResistivity String        @id @default(uuid())
  designation           String
  date                  DateTime      @default(now())
  updateAt              DateTime      @updatedAt
  depth                 Float
  orientation           Float
  value                 Float
  measurementInstrument String
  idContactPerson       String
  contactPerson         ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
  linkage               Linkage[]
}

model PositionSoilData {
  positionSoilDataId String        @id @default(uuid())
  date               DateTime      @default(now())
  updateAt           DateTime      @updatedAt
  Z1                 Int
  Z2                 Int
  Z3                 Int
  Z4                 Int
  Z5                 Int
  Z6                 Int
  Z7                 Int
  Z8                 Int
  Z9                 Int
  Z10                Int
  Z11                Int
  Z12                Int
  Z13                Int
  Z14                Int
  Z15                Int
  b0                 Int
  b1                 Int
  idContactPerson    String
  contactPerson      ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
  linkage            Linkage[]
}

model Linkage {
  idLinkage                          String              @id @default(uuid())
  idProject                          String
  project                            Project             @relation(fields: [idProject], references: [idProject])
  idPositionMeasurement              String
  positionMeasurement                PositionMeasurement @relation(fields: [idPositionMeasurement], references: [idPositionMeasurement])
  idPositionResistivity              String
  positionResistivity                PositionResistivity @relation(fields: [idPositionResistivity], references: [idPositionResistivity])
  idField                            String
  field                              Field               @relation(fields: [idField], references: [fieldId])
  idAddress                          Int
  address                            Address             @relation(fields: [idAddress], references: [idAddress])
  positionSoilData                   PositionSoilData    @relation(fields: [positionSoilDataPositionSoilDataId], references: [positionSoilDataId])
  positionSoilDataPositionSoilDataId String
  PositionData                       PositionData?       @relation(fields: [positionDataIdPositionData], references: [idPositionData])
  positionDataIdPositionData         String?
}

model AuditLog {
  idAudit         Int           @id @default(autoincrement())
  tableName       String        @db.VarChar(100)
  actionType      ActionType
  date            DateTime      @default(now())
  state           State         @default(ACTIVE)
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
}

enum State {
  ACTIVE
  INACTIVE
}

enum ActionType {
  INSERT
  UPDATE
  DELETE
}
