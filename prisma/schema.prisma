generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CookieToken {
  id              String  @id @default(uuid())
  idContactPerson String?
  idStakeHolder   String?
  idProject       String?
}

model Picture {
  idPicture     Int           @id @default(autoincrement())
  idStakeholder String
  designation   String
  date          DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  pictureFile   String
  stakeHolder   StakeHolder[]
}

model Address {
  idAddress   Int           @id @default(autoincrement())
  country     String?
  state       String?
  city        String?
  postbox     String?
  street      String?
  number      String?
  longitude   Float?
  latitude    Float?
  isActive    State         @default(ACTIVE)
  StakeHolder StakeHolder[]
  field       Field[]
  project     Project[]
}

model PhoneStakeHolder {
  idPhone       Int         @id @default(autoincrement())
  number        String
  stakeHolderId String
  stakeHolder   StakeHolder @relation(fields: [stakeHolderId], references: [idStakeHolder])
}

model StakeHolder {
  idStakeHolder    String             @id @default(uuid())
  name             String             @db.VarChar(100)
  industry         String             @db.VarChar(100)
  email            String             @unique @db.VarChar(100)
  password         String             @db.VarChar(50)
  fax              String?
  www              String?
  type             StakeHolderType
  state            State              @default(ACTIVE)
  idAddress        Int
  address          Address            @relation(fields: [idAddress], references: [idAddress])
  idContactPerson  String
  contactPerson    ContactPerson      @relation(fields: [idContactPerson], references: [idContactPerson])
  idPicture        Int?
  picture          Picture?           @relation(fields: [idPicture], references: [idPicture])
  project          Project[]
  phoneStakeHolder PhoneStakeHolder[]
}

model Project {
  idProject       String        @id @default(uuid())
  state           State         @default(ACTIVE)
  designation     String
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
  idStakeholder   String
  stakeholder     StakeHolder   @relation(fields: [idStakeholder], references: [idStakeHolder])
  idAddress       Int
  address         Address       @relation(fields: [idAddress], references: [idAddress])
  field           Field[]
}

model Role {
  idRole        Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  state         State           @default(ACTIVE)
  contactPerson ContactPerson[]
}

model PhoneContactPerson {
  idPhone         Int           @id @default(autoincrement())
  number          String
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
}

model ContactPerson {
  idContactPerson     String                @id @default(uuid())
  firstName           String                @db.VarChar(50)
  lastName            String                @db.VarChar(50)
  fax                 String?
  www                 String?
  email               String                @unique @db.VarChar(100)
  password            String                @db.VarChar(50)
  state               State                 @default(ACTIVE)
  idRole              Int
  role                Role                  @relation(fields: [idRole], references: [idRole])
  phones              PhoneContactPerson[]
  auditLog            AuditLog[]
  positionSoilData    PositionSoilData[]
  positionMeasurement PositionMeasurement[]
  stakeHolder         StakeHolder[]
  positionResistivity PositionResistivity[]
  project             Project[]
}

model Field {
  idField                  String         @id @default(uuid())
  designation              String
  fence                    Boolean
  connectionEarthingFence  Boolean
  externalCurrentInfluence Boolean
  state                    State          @default(ACTIVE)
  idAddress                Int
  address                  Address        @relation(fields: [idAddress], references: [idAddress])
  idProject                String
  project                  Project        @relation(fields: [idProject], references: [idProject])
  positionData             PositionData[]
}

model PositionData {
  idPositionData   String       @id @default(uuid())
  pointType        PositionType
  latitude         Float
  longitude        Float
  pileDesignation  String
  pointDesignation String
  grounding        Boolean
  idField          String
  field            Field        @relation(fields: [idField], references: [idField])
  linkage          Linkage[]
}

model PositionMeasurement {
  idPositionMeasurement        String                         @id @default(uuid())
  designation                  String
  date                         DateTime                       @default(now())
  updateAt                     DateTime                       @updatedAt
  potentialVr                  Float
  potentialVOn                 Float
  potentialVOff                Float
  galvanicCurrent              Float
  coatingThickness             Float
  materialTrickness            Float
  idContactPerson              String
  contactPerson                ContactPerson                  @relation(fields: [idContactPerson], references: [idContactPerson])
  positionMeasurementOnLinkage PositionMeasurementOnLinkage[]
}

model PositionResistivity {
  idPositionResistivity        String                         @id @default(uuid())
  designation                  String
  date                         DateTime                       @default(now())
  updateAt                     DateTime                       @updatedAt
  depth                        Float
  orientation                  Float
  value                        Float
  measurementInstrument        String
  idContactPerson              String
  contactPerson                ContactPerson                  @relation(fields: [idContactPerson], references: [idContactPerson])
  positionResistivityOnLinkage PositionResistivityOnLinkage[]
}

model PositionSoilData {
  idPositionSoilData        String                      @id @default(uuid())
  date                      DateTime                    @default(now())
  updateAt                  DateTime                    @updatedAt
  z1                        Float
  z2                        Float
  z3                        Float
  z4                        Float
  z5                        Float
  z6                        Float
  z7                        Float
  z8                        Float
  z9                        Float
  z10                       Float
  z11                       Float
  z12                       Float
  z13                       Float
  z14                       Float
  z15                       Float
  b0                        Float
  b1                        Float
  chlorides                 Float
  idContactPerson           String
  contactPerson             ContactPerson               @relation(fields: [idContactPerson], references: [idContactPerson])
  positionSoilDataOnLinkage PositionSoilDataOnLinkage[]
}

model PositionMeasurementOnLinkage {
  idLinkage             String
  linkage               Linkage             @relation(fields: [idLinkage], references: [idLinkage])
  idPositionMeasurement String
  positionMeasurement   PositionMeasurement @relation(fields: [idPositionMeasurement], references: [idPositionMeasurement])

  @@id([idPositionMeasurement])
}

model PositionResistivityOnLinkage {
  idLinkage             String
  linkage               Linkage             @relation(fields: [idLinkage], references: [idLinkage])
  idPositionResistivity String
  positionResistivity   PositionResistivity @relation(fields: [idPositionResistivity], references: [idPositionResistivity])

  @@id([idPositionResistivity])
}

model PositionSoilDataOnLinkage {
  idLinkage          String
  linkage            Linkage          @relation(fields: [idLinkage], references: [idLinkage])
  idPositionSoilData String
  positionSoilData   PositionSoilData @relation(fields: [idPositionSoilData], references: [idPositionSoilData])

  @@id([idPositionSoilData])
}

model Linkage {
  idLinkage                    String                         @id @default(uuid())
  date                         DateTime                       @default(now())
  updateAt                     DateTime                       @updatedAt
  idPositionData               String
  positionData                 PositionData                   @relation(fields: [idPositionData], references: [idPositionData])
  positionMeasurementOnLinkage PositionMeasurementOnLinkage[]
  positionResistivityOnLinkage PositionResistivityOnLinkage[]
  positionSoilDataOnLinkage    PositionSoilDataOnLinkage[]
}

model AuditLog {
  idAudit         Int           @id @default(autoincrement())
  tableName       String        @db.VarChar(100)
  actionType      ActionType
  date            DateTime      @default(now())
  state           State         @default(ACTIVE)
  idContactPerson String
  contactPerson   ContactPerson @relation(fields: [idContactPerson], references: [idContactPerson])
}

enum State {
  ACTIVE
  INACTIVE
}

enum ActionType {
  INSERT
  UPDATE
  DELETE
}

enum StakeHolderType {
  CLIENT
  SUPPLIER
  SERVICE_PROVIDER
  GOVT_INSTANCE
}

enum PositionType {
  FIELD
  ZONE
  MEASUREMENT
  POI
}
