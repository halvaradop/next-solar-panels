generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId           Int               @id @default(autoincrement())
  roleName         String            @db.VarChar(50)
  state            State             @default(ACTIVE)
  users            User[]
  rolesPermissions RolesPermission[]
}

model Permission {
  permissionId     Int               @id @default(autoincrement())
  permissionName   String            @db.VarChar(100)
  state            State             @default(ACTIVE)
  rolesPermissions RolesPermission[]
}

model RolesPermission {
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [roleId])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [permissionId])

  @@id([roleId, permissionId])
}

model User {
  userId          String            @id @default(uuid())
  firstName       String            @db.VarChar(50)
  lastName        String            @db.VarChar(50)
  email           String            @db.VarChar(100)
  password        String            @db.VarChar(50)
  state           State             @default(ACTIVE)
  fax             String
  website         String
  roleId          Int
  role            Role              @relation(fields: [roleId], references: [roleId])
  phones          Phone[]
  samples         Sample[]
  auditLogs       AuditLog[]
  clients         Client[]
  projectsOnUsers ProjectsOnUsers[]
}

model AuditLog {
  auditId    Int        @id @default(autoincrement())
  tableName  String     @db.VarChar(100)
  actionType ActionType
  date       DateTime   @default(now())
  state      State      @default(ACTIVE)
  userId     String
  user       User       @relation(fields: [userId], references: [userId])
}

model Address {
  addressId Int       @id @default(autoincrement())
  country   String
  state     String
  city      String
  postbox   String
  street    String
  number    String
  isActive  Boolean
  clients   Client[]
  projects  Project[]
}

model Client {
  clientId  String    @id @default(uuid())
  name      String    @db.VarChar(100)
  email     String    @db.VarChar(100)
  password  String    @db.VarChar(50)
  state     State     @default(ACTIVE)
  fax       String
  website   String
  phones    Phone[]
  projects  Project[]
  addressId Int?
  address   Address?  @relation(fields: [addressId], references: [addressId])
  userId    String?
  user      User?     @relation(fields: [userId], references: [userId])
}

model Phone {
  phoneId  Int     @id @default(autoincrement())
  number   String
  userId   String?
  users    User?   @relation(fields: [userId], references: [userId])
  clientId String?
  clients  Client? @relation(fields: [clientId], references: [clientId])
}

model Project {
  projectId       String            @id @default(uuid())
  name            String            @db.VarChar(100)
  state           State             @default(ACTIVE)
  latitude        Decimal           @db.Decimal(10, 8)
  longitude       Decimal           @db.Decimal(11, 8)
  clientsId       String?
  clients         Client?           @relation(fields: [clientsId], references: [clientId])
  addressId       Int?
  address         Address?          @relation(fields: [addressId], references: [addressId])
  projectsOnUsers ProjectsOnUsers[]
  zones           Zone[]
}

model ProjectsOnUsers {
  projectId String
  project   Project @relation(fields: [projectId], references: [projectId])
  userId    String
  user      User    @relation(fields: [userId], references: [userId])

  @@id([projectId, userId])
}

model Zone {
  zoneId    String   @id @default(uuid())
  name      String   @db.VarChar(50)
  latitude  Decimal  @db.Decimal(10, 8)
  longitude Decimal  @db.Decimal(11, 8)
  state     State    @default(ACTIVE)
  projectId String
  project   Project  @relation(fields: [projectId], references: [projectId])
  samples   Sample[]
}

model Sample {
  sampleId                  Int      @id @default(autoincrement())
  date                      DateTime @default(now()) @updatedAt
  soilTime                  Decimal  @db.Decimal(5, 2)
  soilResistivity           Decimal  @db.Decimal(10, 2)
  moistureContent           Decimal  @db.Decimal(5, 2)
  pHValue                   Decimal  @db.Decimal(4, 2)
  bufferCapacityPH4_3       Decimal  @db.Decimal(5, 2)
  bufferCapacityPH7_0       Decimal  @db.Decimal(5, 2)
  sulfurReducingBacteria    Decimal  @db.Decimal(5, 2)
  sulfateContent            Decimal  @db.Decimal(5, 2)
  neutralSalts              Decimal  @db.Decimal(5, 2)
  undergroundWaterPresence  Decimal  @db.Decimal(5, 2)
  horizontalSoilHomogeneity Decimal  @db.Decimal(5, 2)
  verticalSoilHomogeneity   Decimal  @db.Decimal(5, 2)
  soilTypeHomogeneity       Decimal  @db.Decimal(5, 2)
  pHSoilHomogeneity         Decimal  @db.Decimal(5, 2)
  externalCathodes          Decimal  @db.Decimal(5, 2)
  b0                        Decimal
  b1                        Decimal
  userId                    String
  user                      User     @relation(fields: [userId], references: [userId])
  zoneId                    String
  zone                      Zone     @relation(fields: [zoneId], references: [zoneId])
}

enum State {
  ACTIVE
  INACTIVE
  DELETED
}

enum ActionType {
  INSERT
  UPDATE
  DELETE
}
