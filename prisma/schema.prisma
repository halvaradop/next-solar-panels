generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AuditLogs {
  auditId    Int        @id @default(autoincrement())
  tableName  String     @db.VarChar(100)
  actionType ActionType
  date       DateTime   @default(now())
  state      State      @default(ACTIVE)
  userId     String
  user       Users      @relation(fields: [userId], references: [userId])
}

model Roles {
  roleId           Int                @id @default(autoincrement())
  roleName         String             @db.VarChar(50)
  state            State              @default(ACTIVE)
  users            Users[]
  rolesPermissions RolesPermissions[]
}

model Permissions {
  permissionId     Int                @id @default(autoincrement())
  permissionName   String             @db.VarChar(100)
  state            State              @default(ACTIVE)
  rolesPermissions RolesPermissions[]
}

model RolesPermissions {
  roleId       Int
  permissionId Int
  role         Roles       @relation(fields: [roleId], references: [roleId])
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])

  @@id([roleId, permissionId])
}

model Phones {
  phoneId         Int      @id @default(autoincrement())
  number          String
  users           Users?   @relation(fields: [usersUserId], references: [userId])
  usersUserId     String?
  Clients         Clients? @relation(fields: [clientsClientId], references: [clientId])
  clientsClientId String?
}

model Users {
  userId    String      @id @default(uuid())
  firstName String      @db.VarChar(50)
  lastName  String      @db.VarChar(50)
  email     String      @db.VarChar(100)
  password  String      @db.VarChar(50)
  state     State       @default(ACTIVE)
  fax       String
  website   String
  roleId    Int
  role      Roles       @relation(fields: [roleId], references: [roleId])
  auditLogs AuditLogs[]
  phones    Phones[]
  Samples   Samples[]
}

model Samples {
  sampleId                  Int      @id @default(autoincrement())
  date                      DateTime @default(now()) @updatedAt
  soilTime                  Decimal  @db.Decimal(5, 2)
  soilResistivity           Decimal  @db.Decimal(10, 2)
  moistureContent           Decimal  @db.Decimal(5, 2)
  pHValue                   Decimal  @db.Decimal(4, 2)
  bufferCapacityPH4_3       Decimal  @db.Decimal(5, 2)
  bufferCapacityPH7_0       Decimal  @db.Decimal(5, 2)
  sulfurReducingBacteria    Decimal  @db.Decimal(5, 2)
  sulfateContent            Decimal  @db.Decimal(5, 2)
  neutralSalts              Decimal  @db.Decimal(5, 2)
  undergroundWaterPresence  String   @db.VarChar(50)
  horizontalSoilHomogeneity Decimal  @db.Decimal(5, 2)
  verticalSoilHomogeneity   Decimal  @db.Decimal(5, 2)
  soilTypeHomogeneity       String   @db.VarChar(50)
  pHSoilHomogeneity         Decimal  @db.Decimal(5, 2)
  externalCathodes          Decimal  @db.Decimal(5, 2)
  b1                        String
  b2                        String
  userId                    String
  user                      Users    @relation(fields: [userId], references: [userId])
  zoneId                    Int
  zone                      Zones    @relation(fields: [zoneId], references: [zoneId])
}

model Address {
  addressId Int        @id @default(autoincrement())
  country   String
  state     String
  city      String
  postbox   String
  street    String
  number    String
  isActive  Boolean
  clients   Clients[]
  Projects  Projects[]
}

model Clients {
  clientId  String     @id @default(uuid())
  name      String     @db.VarChar(100)
  email     String     @db.VarChar(100)
  password  String     @db.VarChar(50)
  state     State      @default(ACTIVE)
  fax       String
  website   String
  phones    Phones[]
  projects  Projects[]
  addressId Int?
  address   Address?   @relation(fields: [addressId], references: [addressId])
}

model Projects {
  projectId String   @id @default(uuid())
  name      String   @db.VarChar(100)
  state     State    @default(ACTIVE)
  latitude  Decimal  @db.Decimal(10, 8)
  longitude Decimal  @db.Decimal(11, 8)
  clientsId String?
  clients   Clients? @relation(fields: [clientsId], references: [clientId])
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [addressId])
}

model Zones {
  zoneId    Int       @id @default(autoincrement())
  latitude  Decimal   @db.Decimal(10, 8)
  longitude Decimal   @db.Decimal(11, 8)
  state     State     @default(ACTIVE)
  name      String    @db.VarChar(50)
  projectId String
  samples   Samples[]
}

enum State {
  ACTIVE
  DELETED
}

enum ActionType {
  INSERT
  UPDATE
  DELETE
}
